extends layout

block content
  if webpage
    h3= "<< goto Page: "
      a(href=rootPath+"page/"+webpage._id) #{webpage.input}
    .row
      .p-2.col-6
       .p-2.bg-light.shadow-lg
        if request
          .row.col-md-12
            h4 Request: 
            h4
              a(href=rootPath + "search/request?url=" +  encodeURIComponent(request.url)) 🔍 #{request.url} 
          p= "createdAt: " + moment(request.createdAt).format('YYYY-MM-DDTHH:mm:ss.SSSZ')
          .row
            .col-12
              h5= request.method  + " " + request.resourceType
              a= "Failure: " + JSON.stringify(request.failure)
              br
              a= "isNavigationRequest: " + request.isNavigationRequest
              h5= "redirectChain:"
              if request.redirectChain
                each chain in request.redirectChain
                  a= "- " + chain
                  br
              else
                p empty          
      .p-2.col-6
       .p-2.bg-light.shadow-lg
        if response
          .row.col-md-12
            h4 Response:
            h4 
              a(href=rootPath + "search/response?url=" + encodeURIComponent(response.url)) 🔍 #{response.url} 
        p= "createdAt: " + moment(response.createdAt).format('YYYY-MM-DDTHH:mm:ss.SSSZ')
        h5= "status: " + response.status + " " + response.statusText
        //p= "ok: " + webpage.ok
        .row
          .col-6
            h6 remoteAddress
            a= "ip - port: " + response.remoteAddress.ip + " - " + response.remoteAddress.port
            br
            a= "reverse: "
            br
            each reverse in response.remoteAddress.reverse
              a= reverse
              br
            if response.remoteAddress.geoip
              if response.remoteAddress.geoip[0]
                a= "geoip country: " + response.remoteAddress.geoip[0].country
                br
            a bgp:
            pre= JSON.stringify(response.remoteAddress.bgp[0], null, ' ')
          .col-6
            if webpage.wappalyzer
              h6= "wappalyzer: " + webpage.wappalyzer
            h6 securityDetails
            - var securityDetails = response.securityDetails
            if securityDetails.issuer
              a= "issuer: " + securityDetails.issuer
              br
              a= "protocol: " + securityDetails.protocol
              br
              a= "subjectName: " + securityDetails.subjectName
              br
              - const from = securityDetails.validFrom
              a= "From: " + moment.unix(from).format('YYYY-MM-DDTHH:mm:ss / ') + moment.unix(from).fromNow()
              br
              - const to = securityDetails.validTo
              a= "To: " + moment.unix(to).format('YYYY-MM-DDTHH:mm:ss / ') + moment.unix(to).fromNow()
            else
              p empty

    ul.nav.nav-tabs
      li.nav-item
        a.nav-link.active(data-toggle="tab",href="#content-tab") Content
      li.nav-item
        a.nav-link(data-toggle="tab",href="#diff-tab") Diff
      li.nav-item
        a.nav-link(data-toggle="tab",href="#header-tab") header
    div.tab-content
      div#header-tab.tab-pane
        .row
          .p-2.col-6
              h6 Request Headers:
                if request
                  if request.headers
                    pre.prettyprint.linenums(style="white-space: pre-wrap")
                      each value, key in request.headers
                        | #{key}: #{value}
                        |
          .p-2.col-6
              h6 Response Headers: 
                if response.headers
                  pre.prettyprint.linenums(style="white-space: pre-wrap")
                    each value, key in response.headers
                      | #{key}: #{value}
                      |
      div#diff-tab.tab-pane
          if diff
            h4 Diff
            h5 previous: 
              a(href=rootPath + "response/" + previous._id) #{previous.id}
            div.col-md-12
              button.btn.btn-outline-primary(onclick="diff('side-by-side')") side-by-side
              button.btn.btn-outline-primary(onclick="diff('line-by-line')") line-by-line            
              #diff
                pre.prettyprint.linenums(style="white-space: pre-wrap") #{diff}
      div#content-tab.tab-pane.active
        .row
          div.col-md-11
            h5
              if response.text
                a=  "text size: " + response.text.length
              if response.payload
                a= " -> "
                a(href=rootPath+"payload/"+response.payload)= "Payload"
            if response.text
                button.mr-2.btn.btn-outline-primary(data-toggle="collapse" data-target="#JStillery") JStillery ▽
                div#JStillery.collapse
                  pre#js
                button.mr-2.btn.btn-outline-primary(data-toggle="collapse" data-target="#yara") yara ▽
                if response.yara
                  if response.yara.rules
                    each rule in response.yara.rules
                      if rule.id
                        span.badge.badge-warning
                          a= rule.id
                div#yara.collapse
                  if response.yara
                    pre#yarascan= JSON.stringify(response.yara, null, " ")
                  else
                    pre#yarascan
                pre#content.prettyprint.linenums(style="white-space: pre-wrap") #{response.text}
                div(hidden="")
                  pre#tmp(style="white-space: pre-wrap") #{response.text}
            else
              h5 No Content.
          div.col-md-1
            a Beautify
            .btn-group-vertical
                button.btn.btn-sm.btn-outline-primary(onclick="beautify(\"script\")") JS
                button.btn.btn-sm.btn-outline-primary(onclick="beautify(\"stylesheet\")") CSS
                button.btn.btn-sm.btn-outline-primary(onclick="beautify(\"html\")") HTML
                button.btn.btn-sm.btn-outline-primary(onclick="prettyPrint()") prettyPrint
            hr
            p Deobfuscate
              button.btn.btn-sm.btn-primary(onclick="jstillery()") JStillery
            hr
            p
              button.btn.btn-sm.btn-primary(onclick="yara()") yara
            p
              button.btn.btn-sm.btn-primary(onclick="reset()") reset

          script.
              var apiPath = #{rootPath};
              function reset(){
                var content=$("#tmp").text();
                $('pre#content').text(content);
                $('pre#content').removeClass("prettyprinted");
              };
              function jstillery(){
                var content=$("#content").text();
                $.ajax({
                  type: "post",
                  url: apiPath + "api/jstillery",
                  data:JSON.stringify({"source":content}),
                  contentType: 'application/json',
                  dataType: "json",            
                  success: function(result) { 
                    $('pre#js').text(result["source"]);
                  },
                  error: function() {
                    $('pre#js').text("jstillery error");
                  }
                })
              };
              function beautify(type){
                //console.log(type);
                var content=$("#content").text();
                var beautified;
                var opts = {"unescape-strings":true};
                if (type==="script") beautified = js_beautify(content, opts);
                else if (type==="stylesheet") beautified = css_beautify(content);
                else beautified = html_beautify(content);
                $('pre#content').text(beautified);
              };
              
              function yara(){
                var content=$("pre#content").text();
                $.ajax({
                  type: "post",
                  url: apiPath + "api/yara",
                  data: JSON.stringify({"source":content}),
                  contentType: 'application/json',
                  dataType: "json",            
                  success: function(result) { 
                    console.log(result)
                    $('pre#yarascan').text(JSON.stringify(result, null, " "));
                    if ("rules" in result){
                      for(let rule of result["rules"]){
                        console.log(rule)
                        if("matches" in rule){
                          for(let match of rule["matches"]){
                            highlight = content.substr(match["offset"], match["length"])
                            $("pre#content").highlight(highlight);
                          }
                        }
                      }
                    }
                  },
                error: function(err) {
                    $('pre#yara').text(err);
                  }
                })
              };

  else
    div.alert.alert-warning
      p No data